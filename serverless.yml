service: idcrypt-backend

# Also for time being creating certs same as domain name, if in future wildcard cert needs to be used we need to add
# 'certificateName' under 'customDomain' section below.
# Only dev.api.idcrypt.io has been added, for qa, uat, prod :
#      test.api.idcrypt.io is also created

#  Go to 'Route53'
#  - First create a new hosted zone ENV.api.idcrypt.io of Type: Public Hosted Zone
#  - Click into your hosted zone, and select the record set with type "NS"
#  - Copy the nameservers in the "value" box on the right.
#  - Return to original hosted zone of idcrypt.io.
#  - Click 'Create Record Set' -> Name = 'ENV.api.idcrypt.io', Type = 'NS', Value = 'Paste value of nameservers'
#
#  Go to 'AWS Certificate Manager'
#          -> Change region to N.Virginia (us-east-1) since serverless-domain-manager plugin only works in this region
#             However once a cert is generated it can be used in any region's domain
#     - Click 'Request a certificate'
#            -> 'Request a public certificate' -> 'Request a Certificate'
#            -> Domain name = ENV.api.idcrypt.io
#            -> Select DNS validation method
#            -> Click on button to auto create Route53 CNAME record
#            -> Wait 10 mins for the cert to be issued.
#  - Run 'sls create_domain' with --stage ENV
#    Wait 20-30 mins for domain to be active
custom:
  search:
    test:
      es-infra-filename: es-nonprod.yml
    dev:
      es-infra-filename: es-nonprod.yml
    qa:
      es-infra-filename: es-nonprod.yml
    uat:
      es-infra-filename: es-nonprod.yml
    prod:
      es-infra-filename: es-prod.yml
  s3UploadBucketName:
    test: idcrypt-document-uploads172024-test
    dev: idcrypt-document-uploads172024-dev
    qa: xxx
    uat: xxxx
    prod: xxx
  tableName:
    accounts: 'Accounts-${self:provider.stage}'
    requests: 'Requests-${self:provider.stage}'
    repos: 'Repos-${self:provider.stage}'
    docs: 'Docs-${self:provider.stage}'
  customDomain:
    domainName: ${self:provider.stage}.api.idcrypt.io
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  wsgi:
    app: backend.app
    packRequirements: false
    pythonBin: python3
  pythonRequirements:
    dockerizePip: false
  dynamodb:
    stages:
      - test
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  arns:
    test:
      userPoolArn: arn:aws:cognito-idp:eu-west-1:758837945329:userpool/eu-west-1_R8z2Oswjr
      s3Arn: arn:aws:s3:::*
    dev:
      userPoolArn: arn:aws:cognito-idp:eu-west-1:758837945329:userpool/eu-west-1_R8z2Oswjr
      s3Arn: arn:aws:s3:::*
    qa:
      userPoolArn: xxx
      s3Arn: arn:aws:s3:::*
    uat:
      userPoolArn: xxx
      s3Arn: arn:aws:s3:::*
    prod:
      userPoolArn: xxx
      s3Arn: arn:aws:s3:::*



#  corsOrigins:
#    dev:
#      - https://dev.idcrypt.io
#      - https://qa.idcrypt.io
#      - http://localhost:4200
#    qa:
#      - https://dev.idcrypt.io
#      - https://qa.idcrypt.io
#      - http://localhost:4200
#    uat:
#      - https://uat.idcrypt.io
#    prod:
#      - https://idcrypt.io

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["AccountsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RequestsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ReposDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["DocsDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - dynamodb:ListTables
        - dynamodb:Query
      Resource:
        - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ':', { Ref: "AWS::AccountId" }, ":table/*" ]]
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
      Resource:
        - ${self:custom.arns.${self:provider.stage}.userPoolArn}
    - Effect: Allow
      Action:
        - s3:CreateBucket
        - s3:PutBucketLogging
        - s3:PutBucketTagging
        - s3:PutEncryptionConfiguration
        - s3:PutLifecycleConfiguration
        - s3:PutObject
      Resource:
        - ${self:custom.arns.${self:provider.stage}.s3Arn}
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
      Resource:
        - { "Fn::GetAtt": ["DocSearch", "DomainArn"] }
        - { "Fn::Join": ["", ["Fn::GetAtt": ["DocSearch", "DomainArn"], "/*"]] }


  environment:
    STAGE: ${opt:stage}

functions:
  Backend:
    environment:
      ENV: ${opt:stage, 'dev'}
    handler: wsgi_handler.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
          authorizer:
            name: authorizer
            arn: ${self:custom.arns.${self:provider.stage}.userPoolArn}
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            name: authorizer
            arn: ${self:custom.arns.${self:provider.stage}.userPoolArn}
          cors: true
  RequestProcessor:
    environment:
      ENV: ${opt:stage, 'dev'}
    handler: triggers/requestProcessor.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ RequestsDynamoDBTable, StreamArn ]
          batchSize: 1
          startingPosition: LATEST
  UploadsProcessor:
    environment:
      ENV: ${opt:stage, 'dev'}
    handler: triggers/s3UploadsProcessor.handler
    events:
      - s3:
          bucket: ${self:custom.s3UploadBucketName.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: private/
          existing: true
  DocProcessor:
    environment:
      ENV: ${opt:stage, 'dev'}
    handler: triggers/docsProcessor.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ DocsDynamoDBTable, StreamArn ]
          batchSize: 1
          startingPosition: LATEST

resources:
    - ${file(./infra/dynamodb.yml)}
    - ${file(./infra/${self:custom.search.${self:provider.stage}.es-infra-filename})}

package:
  exclude:
    - .lambda_env/**
    - .dynamodb/**
    - .pytest_cache/**
    - .idea/**
    - nohup.out
    - node_modules/**
    - env/**
    - elasticsearch-7.4.2/**
    - kibana-7.4.2-darwin-x86_64/**
    - test-integration/**

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-wsgi
